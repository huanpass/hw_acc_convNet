/*
 * This source file contains a Verilog description of an IP core
 * automatically generated by the SPIRAL HDL Generator.
 *
 * This product includes a hardware design developed by Carnegie Mellon University.
 *
 * Copyright (c) 2005-2011 by Peter A. Milder for the SPIRAL Project,
 * Carnegie Mellon University
 *
 * For more information, see the SPIRAL project website at:
 *   http://www.spiral.net
 *
 * This design is provided for internal, non-commercial research use only
 * and is not for redistribution, with or without modifications.
 * 
 * You may not use the name "Carnegie Mellon University" or derivations
 * thereof to endorse or promote products derived from this software.
 *
 * THE SOFTWARE IS PROVIDED "AS-IS" WITHOUT ANY WARRANTY OF ANY KIND, EITHER
 * EXPRESS, IMPLIED OR STATUTORY, INCLUDING BUT NOT LIMITED TO ANY WARRANTY
 * THAT THE SOFTWARE WILL CONFORM TO SPECIFICATIONS OR BE ERROR-FREE AND ANY
 * IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE,
 * TITLE, OR NON-INFRINGEMENT.  IN NO EVENT SHALL CARNEGIE MELLON UNIVERSITY
 * BE LIABLE FOR ANY DAMAGES, INCLUDING BUT NOT LIMITED TO DIRECT, INDIRECT,
 * SPECIAL OR CONSEQUENTIAL DAMAGES, ARISING OUT OF, RESULTING FROM, OR IN
 * ANY WAY CONNECTED WITH THIS SOFTWARE (WHETHER OR NOT BASED UPON WARRANTY,
 * CONTRACT, TORT OR OTHERWISE).
 *
 */

//   Input/output stream: 8 complex words per cycle
//   Throughput: one transform every 1 cycles
//   Latency: 11 cycles

//   Resources required:
//     4 multipliers (16 x 16 bit)
//     52 adders (16 x 16 bit)

// Generated on Wed Jul 06 18:43:37 EDT 2016

// Latency: 11 clock cycles
// Throughput: 1 transform every 1 cycles


// We use an interleaved complex data format.  X0 represents the
// real portion of the first input, and X1 represents the imaginary
// portion.  The X variables are system inputs and the Y variables
// are system outputs.

// The design uses a system of flag signals to indicate the
// beginning of the input and output data streams.  The 'next'
// input (asserted high), is used to instruct the system that the
// input stream will begin on the following cycle.

// This system has a 'gap' of 1 cycles.  This means that
// 1 cycles must elapse between the beginning of the input
// vectors.

// The output signal 'next_out' (also asserted high) indicates
// that the output vector will begin streaming out of the system
 // on the following cycle.

// The system has a latency of 11 cycles.  This means that
// the 'next_out' will be asserted 11 cycles after the user
// asserts 'next'.

// The simple testbench below will demonstrate the timing for loading
// and unloading data vectors.
// The system reset signal is asserted high.

// Please note: when simulating floating point code, you must include
// Xilinx's DSP slice simulation module.



// Latency: 11
// Gap: 1
// module_name_is:dft_top
module ifft8_8(clk, reset, next, next_out,
   X0, Y0,
   X1, Y1,
   X2, Y2,
   X3, Y3,
   X4, Y4,
   X5, Y5,
   X6, Y6,
   X7, Y7,
   X8, Y8,
   X9, Y9,
   X10, Y10,
   X11, Y11,
   X12, Y12,
   X13, Y13,
   X14, Y14,
   X15, Y15);

   output next_out;
   input clk, reset, next;

   input [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15;

   wire [15:0] t0_0;
   wire [15:0] t0_1;
   wire [15:0] t0_2;
   wire [15:0] t0_3;
   wire [15:0] t0_4;
   wire [15:0] t0_5;
   wire [15:0] t0_6;
   wire [15:0] t0_7;
   wire [15:0] t0_8;
   wire [15:0] t0_9;
   wire [15:0] t0_10;
   wire [15:0] t0_11;
   wire [15:0] t0_12;
   wire [15:0] t0_13;
   wire [15:0] t0_14;
   wire [15:0] t0_15;
   wire next_0;
   wire [15:0] t1_0;
   wire [15:0] t1_1;
   wire [15:0] t1_2;
   wire [15:0] t1_3;
   wire [15:0] t1_4;
   wire [15:0] t1_5;
   wire [15:0] t1_6;
   wire [15:0] t1_7;
   wire [15:0] t1_8;
   wire [15:0] t1_9;
   wire [15:0] t1_10;
   wire [15:0] t1_11;
   wire [15:0] t1_12;
   wire [15:0] t1_13;
   wire [15:0] t1_14;
   wire [15:0] t1_15;
   wire next_1;
   wire [15:0] t2_0;
   wire [15:0] t2_1;
   wire [15:0] t2_2;
   wire [15:0] t2_3;
   wire [15:0] t2_4;
   wire [15:0] t2_5;
   wire [15:0] t2_6;
   wire [15:0] t2_7;
   wire [15:0] t2_8;
   wire [15:0] t2_9;
   wire [15:0] t2_10;
   wire [15:0] t2_11;
   wire [15:0] t2_12;
   wire [15:0] t2_13;
   wire [15:0] t2_14;
   wire [15:0] t2_15;
   wire next_2;
   wire [15:0] t3_0;
   wire [15:0] t3_1;
   wire [15:0] t3_2;
   wire [15:0] t3_3;
   wire [15:0] t3_4;
   wire [15:0] t3_5;
   wire [15:0] t3_6;
   wire [15:0] t3_7;
   wire [15:0] t3_8;
   wire [15:0] t3_9;
   wire [15:0] t3_10;
   wire [15:0] t3_11;
   wire [15:0] t3_12;
   wire [15:0] t3_13;
   wire [15:0] t3_14;
   wire [15:0] t3_15;
   wire next_3;
   wire [15:0] t4_0;
   wire [15:0] t4_1;
   wire [15:0] t4_2;
   wire [15:0] t4_3;
   wire [15:0] t4_4;
   wire [15:0] t4_5;
   wire [15:0] t4_6;
   wire [15:0] t4_7;
   wire [15:0] t4_8;
   wire [15:0] t4_9;
   wire [15:0] t4_10;
   wire [15:0] t4_11;
   wire [15:0] t4_12;
   wire [15:0] t4_13;
   wire [15:0] t4_14;
   wire [15:0] t4_15;
   wire next_4;
   wire [15:0] t5_0;
   wire [15:0] t5_1;
   wire [15:0] t5_2;
   wire [15:0] t5_3;
   wire [15:0] t5_4;
   wire [15:0] t5_5;
   wire [15:0] t5_6;
   wire [15:0] t5_7;
   wire [15:0] t5_8;
   wire [15:0] t5_9;
   wire [15:0] t5_10;
   wire [15:0] t5_11;
   wire [15:0] t5_12;
   wire [15:0] t5_13;
   wire [15:0] t5_14;
   wire [15:0] t5_15;
   wire next_5;
   assign t0_0 = X0;
   assign Y0 = t5_0;
   assign t0_1 = X1;
   assign Y1 = t5_1;
   assign t0_2 = X2;
   assign Y2 = t5_2;
   assign t0_3 = X3;
   assign Y3 = t5_3;
   assign t0_4 = X4;
   assign Y4 = t5_4;
   assign t0_5 = X5;
   assign Y5 = t5_5;
   assign t0_6 = X6;
   assign Y6 = t5_6;
   assign t0_7 = X7;
   assign Y7 = t5_7;
   assign t0_8 = X8;
   assign Y8 = t5_8;
   assign t0_9 = X9;
   assign Y9 = t5_9;
   assign t0_10 = X10;
   assign Y10 = t5_10;
   assign t0_11 = X11;
   assign Y11 = t5_11;
   assign t0_12 = X12;
   assign Y12 = t5_12;
   assign t0_13 = X13;
   assign Y13 = t5_13;
   assign t0_14 = X14;
   assign Y14 = t5_14;
   assign t0_15 = X15;
   assign Y15 = t5_15;
   assign next_0 = next;
   assign next_out = next_5;

// latency=1, gap=1
   codeBlock17592 stage0(.clk(clk), .reset(reset), .next_in(next_0), .next_out(next_1),
       .X0_in(t0_0), .Y0(t1_0),
       .X1_in(t0_1), .Y1(t1_1),
       .X2_in(t0_2), .Y2(t1_2),
       .X3_in(t0_3), .Y3(t1_3),
       .X4_in(t0_4), .Y4(t1_4),
       .X5_in(t0_5), .Y5(t1_5),
       .X6_in(t0_6), .Y6(t1_6),
       .X7_in(t0_7), .Y7(t1_7),
       .X8_in(t0_8), .Y8(t1_8),
       .X9_in(t0_9), .Y9(t1_9),
       .X10_in(t0_10), .Y10(t1_10),
       .X11_in(t0_11), .Y11(t1_11),
       .X12_in(t0_12), .Y12(t1_12),
       .X13_in(t0_13), .Y13(t1_13),
       .X14_in(t0_14), .Y14(t1_14),
       .X15_in(t0_15), .Y15(t1_15));


// latency=2, gap=1
   codeBlock17658 stage1(.clk(clk), .reset(reset), .next_in(next_1), .next_out(next_2),
       .X0_in(t1_0), .Y0(t2_0),
       .X1_in(t1_1), .Y1(t2_1),
       .X2_in(t1_2), .Y2(t2_2),
       .X3_in(t1_3), .Y3(t2_3),
       .X4_in(t1_4), .Y4(t2_4),
       .X5_in(t1_5), .Y5(t2_5),
       .X6_in(t1_6), .Y6(t2_6),
       .X7_in(t1_7), .Y7(t2_7),
       .X8_in(t1_8), .Y8(t2_8),
       .X9_in(t1_9), .Y9(t2_9),
       .X10_in(t1_10), .Y10(t2_10),
       .X11_in(t1_11), .Y11(t2_11),
       .X12_in(t1_12), .Y12(t2_12),
       .X13_in(t1_13), .Y13(t2_13),
       .X14_in(t1_14), .Y14(t2_14),
       .X15_in(t1_15), .Y15(t2_15));


// latency=2, gap=1
   codeBlock17965 stage2(.clk(clk), .reset(reset), .next_in(next_2), .next_out(next_3),
       .X0_in(t2_0), .Y0(t3_0),
       .X1_in(t2_1), .Y1(t3_1),
       .X2_in(t2_2), .Y2(t3_2),
       .X3_in(t2_3), .Y3(t3_3),
       .X4_in(t2_4), .Y4(t3_4),
       .X5_in(t2_5), .Y5(t3_5),
       .X6_in(t2_6), .Y6(t3_6),
       .X7_in(t2_7), .Y7(t3_7),
       .X8_in(t2_8), .Y8(t3_8),
       .X9_in(t2_9), .Y9(t3_9),
       .X10_in(t2_10), .Y10(t3_10),
       .X11_in(t2_11), .Y11(t3_11),
       .X12_in(t2_12), .Y12(t3_12),
       .X13_in(t2_13), .Y13(t3_13),
       .X14_in(t2_14), .Y14(t3_14),
       .X15_in(t2_15), .Y15(t3_15));


// latency=5, gap=1
   codeBlock18272 stage3(.clk(clk), .reset(reset), .next_in(next_3), .next_out(next_4),
       .X0_in(t3_0), .Y0(t4_0),
       .X1_in(t3_1), .Y1(t4_1),
       .X2_in(t3_2), .Y2(t4_2),
       .X3_in(t3_3), .Y3(t4_3),
       .X4_in(t3_4), .Y4(t4_4),
       .X5_in(t3_5), .Y5(t4_5),
       .X6_in(t3_6), .Y6(t4_6),
       .X7_in(t3_7), .Y7(t4_7),
       .X8_in(t3_8), .Y8(t4_8),
       .X9_in(t3_9), .Y9(t4_9),
       .X10_in(t3_10), .Y10(t4_10),
       .X11_in(t3_11), .Y11(t4_11),
       .X12_in(t3_12), .Y12(t4_12),
       .X13_in(t3_13), .Y13(t4_13),
       .X14_in(t3_14), .Y14(t4_14),
       .X15_in(t3_15), .Y15(t4_15));


// latency=1, gap=1
   codeBlock18619 stage4(.clk(clk), .reset(reset), .next_in(next_4), .next_out(next_5),
       .X0_in(t4_0), .Y0(t5_0),
       .X1_in(t4_1), .Y1(t5_1),
       .X2_in(t4_2), .Y2(t5_2),
       .X3_in(t4_3), .Y3(t5_3),
       .X4_in(t4_4), .Y4(t5_4),
       .X5_in(t4_5), .Y5(t5_5),
       .X6_in(t4_6), .Y6(t5_6),
       .X7_in(t4_7), .Y7(t5_7),
       .X8_in(t4_8), .Y8(t5_8),
       .X9_in(t4_9), .Y9(t5_9),
       .X10_in(t4_10), .Y10(t5_10),
       .X11_in(t4_11), .Y11(t5_11),
       .X12_in(t4_12), .Y12(t5_12),
       .X13_in(t4_13), .Y13(t5_13),
       .X14_in(t4_14), .Y14(t5_14),
       .X15_in(t4_15), .Y15(t5_15));


endmodule

// Latency: 1
// Gap: 1
module codeBlock17592(clk, reset, next_in, next_out,
   X0_in, Y0,
   X1_in, Y1,
   X2_in, Y2,
   X3_in, Y3,
   X4_in, Y4,
   X5_in, Y5,
   X6_in, Y6,
   X7_in, Y7,
   X8_in, Y8,
   X9_in, Y9,
   X10_in, Y10,
   X11_in, Y11,
   X12_in, Y12,
   X13_in, Y13,
   X14_in, Y14,
   X15_in, Y15);

   output next_out;
   input clk, reset, next_in;

   reg next;

   input [15:0] X0_in,
      X1_in,
      X2_in,
      X3_in,
      X4_in,
      X5_in,
      X6_in,
      X7_in,
      X8_in,
      X9_in,
      X10_in,
      X11_in,
      X12_in,
      X13_in,
      X14_in,
      X15_in;

   reg   [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15;

   assign next_out = next;


   wire signed [15:0] Y0;
   wire signed [15:0] Y1;
   wire signed [15:0] Y2;
   wire signed [15:0] Y3;
   wire signed [15:0] Y4;
   wire signed [15:0] Y5;
   wire signed [15:0] Y6;
   wire signed [15:0] Y7;
   wire signed [15:0] Y8;
   wire signed [15:0] Y9;
   wire signed [15:0] Y10;
   wire signed [15:0] Y11;
   wire signed [15:0] Y12;
   wire signed [15:0] Y13;
   wire signed [15:0] Y14;
   wire signed [15:0] Y15;


   assign Y0 = X0;
   assign Y1 = X1;
   assign Y2 = X8;
   assign Y3 = X9;
   assign Y4 = X4;
   assign Y5 = X5;
   assign Y6 = X12;
   assign Y7 = X13;
   assign Y8 = X2;
   assign Y9 = X3;
   assign Y10 = X10;
   assign Y11 = X11;
   assign Y12 = X6;
   assign Y13 = X7;
   assign Y14 = X14;
   assign Y15 = X15;



   always @(posedge clk) begin
      if (reset == 1) begin
      end
      else begin
         X0 <= X0_in;
         X1 <= X1_in;
         X2 <= X2_in;
         X3 <= X3_in;
         X4 <= X4_in;
         X5 <= X5_in;
         X6 <= X6_in;
         X7 <= X7_in;
         X8 <= X8_in;
         X9 <= X9_in;
         X10 <= X10_in;
         X11 <= X11_in;
         X12 <= X12_in;
         X13 <= X13_in;
         X14 <= X14_in;
         X15 <= X15_in;
         next <= next_in;
      end
   end
endmodule

module shiftRegFIFO(X, Y, clk);
   parameter depth=1, width=1;

   output [width-1:0] Y;
   input  [width-1:0] X;
   input              clk;

   reg [width-1:0]    mem [depth-1:0];
   integer            index;

   assign Y = mem[depth-1];

   always @ (posedge clk) begin
      for(index=1;index<depth;index=index+1) begin
         mem[index] <= mem[index-1];
      end
      mem[0]<=X;
   end
endmodule

// Latency: 2
// Gap: 1
module codeBlock17658(clk, reset, next_in, next_out,
   X0_in, Y0,
   X1_in, Y1,
   X2_in, Y2,
   X3_in, Y3,
   X4_in, Y4,
   X5_in, Y5,
   X6_in, Y6,
   X7_in, Y7,
   X8_in, Y8,
   X9_in, Y9,
   X10_in, Y10,
   X11_in, Y11,
   X12_in, Y12,
   X13_in, Y13,
   X14_in, Y14,
   X15_in, Y15);

   output next_out;
   input clk, reset, next_in;

   reg next;

   input [15:0] X0_in,
      X1_in,
      X2_in,
      X3_in,
      X4_in,
      X5_in,
      X6_in,
      X7_in,
      X8_in,
      X9_in,
      X10_in,
      X11_in,
      X12_in,
      X13_in,
      X14_in,
      X15_in;

   reg   [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15;

   shiftRegFIFO #(1, 1) shiftFIFO_18882(.X(next), .Y(next_out), .clk(clk));


   wire signed [15:0] a169;
   wire signed [15:0] a170;
   wire signed [15:0] a171;
   wire signed [15:0] a172;
   wire signed [15:0] a177;
   wire signed [15:0] a178;
   wire signed [15:0] a179;
   wire signed [15:0] a180;
   wire signed [15:0] a185;
   wire signed [15:0] a186;
   wire signed [15:0] a187;
   wire signed [15:0] a188;
   wire signed [15:0] a193;
   wire signed [15:0] a194;
   wire signed [15:0] a195;
   wire signed [15:0] a196;
   wire signed [15:0] t337;
   wire signed [15:0] t338;
   wire signed [15:0] t339;
   wire signed [15:0] t340;
   wire signed [15:0] Y0;
   wire signed [15:0] Y1;
   wire signed [15:0] Y2;
   wire signed [15:0] Y3;
   wire signed [15:0] t341;
   wire signed [15:0] t342;
   wire signed [15:0] t343;
   wire signed [15:0] t344;
   wire signed [15:0] Y4;
   wire signed [15:0] Y5;
   wire signed [15:0] Y6;
   wire signed [15:0] Y7;
   wire signed [15:0] t345;
   wire signed [15:0] t346;
   wire signed [15:0] t347;
   wire signed [15:0] t348;
   wire signed [15:0] Y8;
   wire signed [15:0] Y9;
   wire signed [15:0] Y10;
   wire signed [15:0] Y11;
   wire signed [15:0] t349;
   wire signed [15:0] t350;
   wire signed [15:0] t351;
   wire signed [15:0] t352;
   wire signed [15:0] Y12;
   wire signed [15:0] Y13;
   wire signed [15:0] Y14;
   wire signed [15:0] Y15;


   assign a169 = X0;
   assign a170 = X2;
   assign a171 = X1;
   assign a172 = X3;
   assign a177 = X4;
   assign a178 = X6;
   assign a179 = X5;
   assign a180 = X7;
   assign a185 = X8;
   assign a186 = X10;
   assign a187 = X9;
   assign a188 = X11;
   assign a193 = X12;
   assign a194 = X14;
   assign a195 = X13;
   assign a196 = X15;
   assign Y0 = t337;
   assign Y1 = t338;
   assign Y2 = t339;
   assign Y3 = t340;
   assign Y4 = t341;
   assign Y5 = t342;
   assign Y6 = t343;
   assign Y7 = t344;
   assign Y8 = t345;
   assign Y9 = t346;
   assign Y10 = t347;
   assign Y11 = t348;
   assign Y12 = t349;
   assign Y13 = t350;
   assign Y14 = t351;
   assign Y15 = t352;

    addfxp #(16, 1) add17670(.a(a169), .b(a170), .clk(clk), .q(t337));    // 0
    addfxp #(16, 1) add17685(.a(a171), .b(a172), .clk(clk), .q(t338));    // 0
    subfxp #(16, 1) sub17700(.a(a169), .b(a170), .clk(clk), .q(t339));    // 0
    subfxp #(16, 1) sub17715(.a(a171), .b(a172), .clk(clk), .q(t340));    // 0
    addfxp #(16, 1) add17746(.a(a177), .b(a178), .clk(clk), .q(t341));    // 0
    addfxp #(16, 1) add17761(.a(a179), .b(a180), .clk(clk), .q(t342));    // 0
    subfxp #(16, 1) sub17776(.a(a177), .b(a178), .clk(clk), .q(t343));    // 0
    subfxp #(16, 1) sub17791(.a(a179), .b(a180), .clk(clk), .q(t344));    // 0
    addfxp #(16, 1) add17822(.a(a185), .b(a186), .clk(clk), .q(t345));    // 0
    addfxp #(16, 1) add17837(.a(a187), .b(a188), .clk(clk), .q(t346));    // 0
    subfxp #(16, 1) sub17852(.a(a185), .b(a186), .clk(clk), .q(t347));    // 0
    subfxp #(16, 1) sub17867(.a(a187), .b(a188), .clk(clk), .q(t348));    // 0
    addfxp #(16, 1) add17898(.a(a193), .b(a194), .clk(clk), .q(t349));    // 0
    addfxp #(16, 1) add17913(.a(a195), .b(a196), .clk(clk), .q(t350));    // 0
    subfxp #(16, 1) sub17928(.a(a193), .b(a194), .clk(clk), .q(t351));    // 0
    subfxp #(16, 1) sub17943(.a(a195), .b(a196), .clk(clk), .q(t352));    // 0


   always @(posedge clk) begin
      if (reset == 1) begin
      end
      else begin
         X0 <= X0_in;
         X1 <= X1_in;
         X2 <= X2_in;
         X3 <= X3_in;
         X4 <= X4_in;
         X5 <= X5_in;
         X6 <= X6_in;
         X7 <= X7_in;
         X8 <= X8_in;
         X9 <= X9_in;
         X10 <= X10_in;
         X11 <= X11_in;
         X12 <= X12_in;
         X13 <= X13_in;
         X14 <= X14_in;
         X15 <= X15_in;
         next <= next_in;
      end
   end
endmodule

// Latency: 2
// Gap: 1
module codeBlock17965(clk, reset, next_in, next_out,
   X0_in, Y0,
   X1_in, Y1,
   X2_in, Y2,
   X3_in, Y3,
   X4_in, Y4,
   X5_in, Y5,
   X6_in, Y6,
   X7_in, Y7,
   X8_in, Y8,
   X9_in, Y9,
   X10_in, Y10,
   X11_in, Y11,
   X12_in, Y12,
   X13_in, Y13,
   X14_in, Y14,
   X15_in, Y15);

   output next_out;
   input clk, reset, next_in;

   reg next;

   input [15:0] X0_in,
      X1_in,
      X2_in,
      X3_in,
      X4_in,
      X5_in,
      X6_in,
      X7_in,
      X8_in,
      X9_in,
      X10_in,
      X11_in,
      X12_in,
      X13_in,
      X14_in,
      X15_in;

   reg   [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15;

   shiftRegFIFO #(1, 1) shiftFIFO_18885(.X(next), .Y(next_out), .clk(clk));


   wire signed [15:0] a105;
   wire signed [15:0] a106;
   wire signed [15:0] a107;
   wire signed [15:0] a108;
   wire signed [15:0] a113;
   wire signed [15:0] a114;
   wire signed [15:0] a115;
   wire signed [15:0] a116;
   wire signed [15:0] a121;
   wire signed [15:0] a122;
   wire signed [15:0] a123;
   wire signed [15:0] a124;
   wire signed [15:0] a129;
   wire signed [15:0] a130;
   wire signed [15:0] a131;
   wire signed [15:0] a132;
   wire signed [15:0] t233;
   wire signed [15:0] t234;
   wire signed [15:0] t235;
   wire signed [15:0] t236;
   wire signed [15:0] Y0;
   wire signed [15:0] Y1;
   wire signed [15:0] Y2;
   wire signed [15:0] Y3;
   wire signed [15:0] t237;
   wire signed [15:0] t238;
   wire signed [15:0] t239;
   wire signed [15:0] t240;
   wire signed [15:0] Y4;
   wire signed [15:0] Y5;
   wire signed [15:0] Y6;
   wire signed [15:0] Y7;
   wire signed [15:0] t241;
   wire signed [15:0] t242;
   wire signed [15:0] t243;
   wire signed [15:0] t244;
   wire signed [15:0] Y8;
   wire signed [15:0] Y9;
   wire signed [15:0] Y10;
   wire signed [15:0] Y11;
   wire signed [15:0] t245;
   wire signed [15:0] t246;
   wire signed [15:0] t247;
   wire signed [15:0] t248;
   wire signed [15:0] Y12;
   wire signed [15:0] Y13;
   wire signed [15:0] Y14;
   wire signed [15:0] Y15;


   assign a105 = X0;
   assign a106 = X4;
   assign a107 = X1;
   assign a108 = X5;
   assign a113 = X2;
   assign a114 = X7;
   assign a115 = X3;
   assign a116 = X6;
   assign a121 = X8;
   assign a122 = X12;
   assign a123 = X9;
   assign a124 = X13;
   assign a129 = X10;
   assign a130 = X15;
   assign a131 = X11;
   assign a132 = X14;
   assign Y0 = t233;
   assign Y1 = t234;
   assign Y2 = t235;
   assign Y3 = t236;
   assign Y4 = t237;
   assign Y5 = t238;
   assign Y6 = t239;
   assign Y7 = t240;
   assign Y8 = t241;
   assign Y9 = t242;
   assign Y10 = t243;
   assign Y11 = t244;
   assign Y12 = t245;
   assign Y13 = t246;
   assign Y14 = t247;
   assign Y15 = t248;

    addfxp #(16, 1) add17977(.a(a105), .b(a106), .clk(clk), .q(t233));    // 0
    addfxp #(16, 1) add17992(.a(a107), .b(a108), .clk(clk), .q(t234));    // 0
    subfxp #(16, 1) sub18007(.a(a105), .b(a106), .clk(clk), .q(t235));    // 0
    subfxp #(16, 1) sub18022(.a(a107), .b(a108), .clk(clk), .q(t236));    // 0
    subfxp #(16, 1) sub18053(.a(a113), .b(a114), .clk(clk), .q(t237));    // 0
    addfxp #(16, 1) add18068(.a(a115), .b(a116), .clk(clk), .q(t238));    // 0
    addfxp #(16, 1) add18083(.a(a113), .b(a114), .clk(clk), .q(t239));    // 0
    subfxp #(16, 1) sub18098(.a(a115), .b(a116), .clk(clk), .q(t240));    // 0
    addfxp #(16, 1) add18129(.a(a121), .b(a122), .clk(clk), .q(t241));    // 0
    addfxp #(16, 1) add18144(.a(a123), .b(a124), .clk(clk), .q(t242));    // 0
    subfxp #(16, 1) sub18159(.a(a121), .b(a122), .clk(clk), .q(t243));    // 0
    subfxp #(16, 1) sub18174(.a(a123), .b(a124), .clk(clk), .q(t244));    // 0
    subfxp #(16, 1) sub18205(.a(a129), .b(a130), .clk(clk), .q(t245));    // 0
    addfxp #(16, 1) add18220(.a(a131), .b(a132), .clk(clk), .q(t246));    // 0
    addfxp #(16, 1) add18235(.a(a129), .b(a130), .clk(clk), .q(t247));    // 0
    subfxp #(16, 1) sub18250(.a(a131), .b(a132), .clk(clk), .q(t248));    // 0


   always @(posedge clk) begin
      if (reset == 1) begin
      end
      else begin
         X0 <= X0_in;
         X1 <= X1_in;
         X2 <= X2_in;
         X3 <= X3_in;
         X4 <= X4_in;
         X5 <= X5_in;
         X6 <= X6_in;
         X7 <= X7_in;
         X8 <= X8_in;
         X9 <= X9_in;
         X10 <= X10_in;
         X11 <= X11_in;
         X12 <= X12_in;
         X13 <= X13_in;
         X14 <= X14_in;
         X15 <= X15_in;
         next <= next_in;
      end
   end
endmodule

// Latency: 5
// Gap: 1
module codeBlock18272(clk, reset, next_in, next_out,
   X0_in, Y0,
   X1_in, Y1,
   X2_in, Y2,
   X3_in, Y3,
   X4_in, Y4,
   X5_in, Y5,
   X6_in, Y6,
   X7_in, Y7,
   X8_in, Y8,
   X9_in, Y9,
   X10_in, Y10,
   X11_in, Y11,
   X12_in, Y12,
   X13_in, Y13,
   X14_in, Y14,
   X15_in, Y15);

   output next_out;
   input clk, reset, next_in;

   reg next;

   input [15:0] X0_in,
      X1_in,
      X2_in,
      X3_in,
      X4_in,
      X5_in,
      X6_in,
      X7_in,
      X8_in,
      X9_in,
      X10_in,
      X11_in,
      X12_in,
      X13_in,
      X14_in,
      X15_in;

   reg   [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15;

   shiftRegFIFO #(4, 1) shiftFIFO_18888(.X(next), .Y(next_out), .clk(clk));


   wire signed [15:0] a45;
   wire signed [15:0] a46;
   wire signed [15:0] a47;
   wire signed [15:0] a48;
   wire signed [15:0] a53;
   wire signed [15:0] a54;
   wire signed [15:0] a55;
   wire signed [15:0] a56;
   wire signed [15:0] a59;
   wire signed [15:0] a60;
   wire signed [15:0] a61;
   wire signed [15:0] a62;
   wire signed [15:0] a67;
   wire signed [15:0] a68;
   wire signed [15:0] a69;
   wire signed [15:0] a70;
   wire signed [15:0] t109;
   wire signed [15:0] t110;
   wire signed [15:0] t111;
   wire signed [15:0] t112;
   wire signed [15:0] t119;
   wire signed [15:0] t120;
   wire signed [15:0] t121;
   wire signed [15:0] t122;
   reg signed [15:0] tm4;
   reg signed [15:0] tm7;
   reg signed [15:0] tm16;
   reg signed [15:0] tm19;
   wire signed [15:0] a41;
   wire signed [15:0] a42;
   wire signed [15:0] a43;
   wire signed [15:0] a44;
   reg signed [15:0] tm5;
   reg signed [15:0] tm8;
   reg signed [15:0] tm17;
   reg signed [15:0] tm20;
   reg signed [15:0] tm28;
   reg signed [15:0] tm31;
   reg signed [15:0] tm34;
   reg signed [15:0] tm37;
   reg signed [15:0] tm40;
   reg signed [15:0] tm43;
   reg signed [15:0] tm46;
   reg signed [15:0] tm49;
   wire signed [15:0] t113;
   wire signed [15:0] t114;
   wire signed [15:0] t123;
   wire signed [15:0] t124;
   reg signed [15:0] tm6;
   reg signed [15:0] tm9;
   reg signed [15:0] tm18;
   reg signed [15:0] tm21;
   reg signed [15:0] tm29;
   reg signed [15:0] tm32;
   reg signed [15:0] tm35;
   reg signed [15:0] tm38;
   reg signed [15:0] tm41;
   reg signed [15:0] tm44;
   reg signed [15:0] tm47;
   reg signed [15:0] tm50;
   wire signed [15:0] Y0;
   wire signed [15:0] Y1;
   wire signed [15:0] Y2;
   wire signed [15:0] Y3;
   wire signed [15:0] t115;
   wire signed [15:0] t116;
   wire signed [15:0] t117;
   wire signed [15:0] t118;
   wire signed [15:0] Y4;
   wire signed [15:0] Y5;
   wire signed [15:0] Y6;
   wire signed [15:0] Y7;
   wire signed [15:0] Y8;
   wire signed [15:0] Y9;
   wire signed [15:0] Y10;
   wire signed [15:0] Y11;
   wire signed [15:0] t125;
   wire signed [15:0] t126;
   wire signed [15:0] t127;
   wire signed [15:0] t128;
   wire signed [15:0] Y12;
   wire signed [15:0] Y13;
   wire signed [15:0] Y14;
   wire signed [15:0] Y15;
   reg signed [15:0] tm30;
   reg signed [15:0] tm33;
   reg signed [15:0] tm36;
   reg signed [15:0] tm39;
   reg signed [15:0] tm42;
   reg signed [15:0] tm45;
   reg signed [15:0] tm48;
   reg signed [15:0] tm51;

   wire signed [15:0] tm0;
   assign tm0 = 16'h2d41;

   assign a45 = X0;
   assign a46 = X8;
   assign a47 = X1;
   assign a48 = X9;
   assign a53 = X12;
   assign a54 = X13;
   assign a55 = X4;
   assign a56 = X5;
   assign a59 = X2;
   assign a60 = X11;
   assign a61 = X3;
   assign a62 = X10;
   assign a67 = X14;
   assign a68 = X15;
   assign a69 = X6;
   assign a70 = X7;
   assign Y0 = tm30;
   assign Y1 = tm33;
   assign Y2 = tm36;
   assign Y3 = tm39;
   assign Y4 = t115;
   assign Y5 = t116;
   assign Y6 = t117;
   assign Y7 = t118;
   assign Y8 = tm42;
   assign Y9 = tm45;
   assign Y10 = tm48;
   assign Y11 = tm51;
   assign Y12 = t125;
   assign Y13 = t126;
   assign Y14 = t127;
   assign Y15 = t128;

    addfxp #(16, 1) add18284(.a(a45), .b(a46), .clk(clk), .q(t109));    // 0
    addfxp #(16, 1) add18299(.a(a47), .b(a48), .clk(clk), .q(t110));    // 0
    subfxp #(16, 1) sub18314(.a(a45), .b(a46), .clk(clk), .q(t111));    // 0
    subfxp #(16, 1) sub18329(.a(a47), .b(a48), .clk(clk), .q(t112));    // 0
    subfxp #(16, 1) sub18456(.a(a59), .b(a60), .clk(clk), .q(t119));    // 0
    addfxp #(16, 1) add18471(.a(a61), .b(a62), .clk(clk), .q(t120));    // 0
    addfxp #(16, 1) add18486(.a(a59), .b(a60), .clk(clk), .q(t121));    // 0
    subfxp #(16, 1) sub18501(.a(a61), .b(a62), .clk(clk), .q(t122));    // 0
    multfix #(16, 2) m18356(.a(tm0), .b(a53), .clk(clk), .q_sc(a41), .q_unsc(), .rst(reset));
    multfix #(16, 2) m18367(.a(tm0), .b(a54), .clk(clk), .q_sc(a42), .q_unsc(), .rst(reset));
    multfix #(16, 2) m18528(.a(tm0), .b(a67), .clk(clk), .q_sc(a43), .q_unsc(), .rst(reset));
    multfix #(16, 2) m18539(.a(tm0), .b(a68), .clk(clk), .q_sc(a44), .q_unsc(), .rst(reset));
    subfxp #(16, 1) sub18374(.a(a41), .b(a42), .clk(clk), .q(t113));    // 2
    addfxp #(16, 1) add18381(.a(a41), .b(a42), .clk(clk), .q(t114));    // 2
    addfxp #(16, 1) add18546(.a(a43), .b(a44), .clk(clk), .q(t123));    // 2
    subfxp #(16, 1) sub18553(.a(a43), .b(a44), .clk(clk), .q(t124));    // 2
    addfxp #(16, 1) add18392(.a(tm6), .b(t113), .clk(clk), .q(t115));    // 3
    addfxp #(16, 1) add18403(.a(tm9), .b(t114), .clk(clk), .q(t116));    // 3
    subfxp #(16, 1) sub18414(.a(tm6), .b(t113), .clk(clk), .q(t117));    // 3
    subfxp #(16, 1) sub18425(.a(tm9), .b(t114), .clk(clk), .q(t118));    // 3
    subfxp #(16, 1) sub18564(.a(tm18), .b(t123), .clk(clk), .q(t125));    // 3
    addfxp #(16, 1) add18575(.a(tm21), .b(t124), .clk(clk), .q(t126));    // 3
    addfxp #(16, 1) add18586(.a(tm18), .b(t123), .clk(clk), .q(t127));    // 3
    subfxp #(16, 1) sub18597(.a(tm21), .b(t124), .clk(clk), .q(t128));    // 3


   always @(posedge clk) begin
      if (reset == 1) begin
      end
      else begin
         X0 <= X0_in;
         X1 <= X1_in;
         X2 <= X2_in;
         X3 <= X3_in;
         X4 <= X4_in;
         X5 <= X5_in;
         X6 <= X6_in;
         X7 <= X7_in;
         X8 <= X8_in;
         X9 <= X9_in;
         X10 <= X10_in;
         X11 <= X11_in;
         X12 <= X12_in;
         X13 <= X13_in;
         X14 <= X14_in;
         X15 <= X15_in;
         next <= next_in;
         tm4 <= a55;
         tm7 <= a56;
         tm16 <= a69;
         tm19 <= a70;
         tm5 <= tm4;
         tm8 <= tm7;
         tm17 <= tm16;
         tm20 <= tm19;
         tm28 <= t109;
         tm31 <= t110;
         tm34 <= t111;
         tm37 <= t112;
         tm40 <= t119;
         tm43 <= t120;
         tm46 <= t121;
         tm49 <= t122;
         tm6 <= tm5;
         tm9 <= tm8;
         tm18 <= tm17;
         tm21 <= tm20;
         tm29 <= tm28;
         tm32 <= tm31;
         tm35 <= tm34;
         tm38 <= tm37;
         tm41 <= tm40;
         tm44 <= tm43;
         tm47 <= tm46;
         tm50 <= tm49;
         tm30 <= tm29;
         tm33 <= tm32;
         tm36 <= tm35;
         tm39 <= tm38;
         tm42 <= tm41;
         tm45 <= tm44;
         tm48 <= tm47;
         tm51 <= tm50;
      end
   end
endmodule

// Latency: 1
// Gap: 1
module codeBlock18619(clk, reset, next_in, next_out,
   X0_in, Y0,
   X1_in, Y1,
   X2_in, Y2,
   X3_in, Y3,
   X4_in, Y4,
   X5_in, Y5,
   X6_in, Y6,
   X7_in, Y7,
   X8_in, Y8,
   X9_in, Y9,
   X10_in, Y10,
   X11_in, Y11,
   X12_in, Y12,
   X13_in, Y13,
   X14_in, Y14,
   X15_in, Y15);

   output next_out;
   input clk, reset, next_in;

   reg next;

   input [15:0] X0_in,
      X1_in,
      X2_in,
      X3_in,
      X4_in,
      X5_in,
      X6_in,
      X7_in,
      X8_in,
      X9_in,
      X10_in,
      X11_in,
      X12_in,
      X13_in,
      X14_in,
      X15_in;

   reg   [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15;

   assign next_out = next;


   wire signed [15:0] Y0;
   wire signed [15:0] Y1;
   wire signed [15:0] Y2;
   wire signed [15:0] Y3;
   wire signed [15:0] Y4;
   wire signed [15:0] Y5;
   wire signed [15:0] Y6;
   wire signed [15:0] Y7;
   wire signed [15:0] Y8;
   wire signed [15:0] Y9;
   wire signed [15:0] Y10;
   wire signed [15:0] Y11;
   wire signed [15:0] Y12;
   wire signed [15:0] Y13;
   wire signed [15:0] Y14;
   wire signed [15:0] Y15;


   assign Y0 = X0;
   assign Y1 = X1;
   assign Y2 = X4;
   assign Y3 = X5;
   assign Y4 = X8;
   assign Y5 = X9;
   assign Y6 = X12;
   assign Y7 = X13;
   assign Y8 = X2;
   assign Y9 = X3;
   assign Y10 = X6;
   assign Y11 = X7;
   assign Y12 = X10;
   assign Y13 = X11;
   assign Y14 = X14;
   assign Y15 = X15;



   always @(posedge clk) begin
      if (reset == 1) begin
      end
      else begin
         X0 <= X0_in;
         X1 <= X1_in;
         X2 <= X2_in;
         X3 <= X3_in;
         X4 <= X4_in;
         X5 <= X5_in;
         X6 <= X6_in;
         X7 <= X7_in;
         X8 <= X8_in;
         X9 <= X9_in;
         X10 <= X10_in;
         X11 <= X11_in;
         X12 <= X12_in;
         X13 <= X13_in;
         X14 <= X14_in;
         X15 <= X15_in;
         next <= next_in;
      end
   end
endmodule


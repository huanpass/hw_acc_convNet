/*
 * This file is automatically generated by Chi Zhang
 * k = 4, M = 8
 */
module crossbar32x32 # (
  parameter DATA_WIDTH = 32
) (
  input clk,
  input clk_en,
  input reset,
  input start,
  input [DATA_WIDTH-1:0] in0,
  input [DATA_WIDTH-1:0] in1,
  input [DATA_WIDTH-1:0] in2,
  input [DATA_WIDTH-1:0] in3,
  input [DATA_WIDTH-1:0] in4,
  input [DATA_WIDTH-1:0] in5,
  input [DATA_WIDTH-1:0] in6,
  input [DATA_WIDTH-1:0] in7,
  input [DATA_WIDTH-1:0] in8,
  input [DATA_WIDTH-1:0] in9,
  input [DATA_WIDTH-1:0] in10,
  input [DATA_WIDTH-1:0] in11,
  input [DATA_WIDTH-1:0] in12,
  input [DATA_WIDTH-1:0] in13,
  input [DATA_WIDTH-1:0] in14,
  input [DATA_WIDTH-1:0] in15,
  input [DATA_WIDTH-1:0] in16,
  input [DATA_WIDTH-1:0] in17,
  input [DATA_WIDTH-1:0] in18,
  input [DATA_WIDTH-1:0] in19,
  input [DATA_WIDTH-1:0] in20,
  input [DATA_WIDTH-1:0] in21,
  input [DATA_WIDTH-1:0] in22,
  input [DATA_WIDTH-1:0] in23,
  input [DATA_WIDTH-1:0] in24,
  input [DATA_WIDTH-1:0] in25,
  input [DATA_WIDTH-1:0] in26,
  input [DATA_WIDTH-1:0] in27,
  input [DATA_WIDTH-1:0] in28,
  input [DATA_WIDTH-1:0] in29,
  input [DATA_WIDTH-1:0] in30,
  input [DATA_WIDTH-1:0] in31,
  output reg start_next_stage,
  output reg [DATA_WIDTH-1:0] out0,
  output reg [DATA_WIDTH-1:0] out1,
  output reg [DATA_WIDTH-1:0] out2,
  output reg [DATA_WIDTH-1:0] out3,
  output reg [DATA_WIDTH-1:0] out4,
  output reg [DATA_WIDTH-1:0] out5,
  output reg [DATA_WIDTH-1:0] out6,
  output reg [DATA_WIDTH-1:0] out7,
  output reg [DATA_WIDTH-1:0] out8,
  output reg [DATA_WIDTH-1:0] out9,
  output reg [DATA_WIDTH-1:0] out10,
  output reg [DATA_WIDTH-1:0] out11,
  output reg [DATA_WIDTH-1:0] out12,
  output reg [DATA_WIDTH-1:0] out13,
  output reg [DATA_WIDTH-1:0] out14,
  output reg [DATA_WIDTH-1:0] out15,
  output reg [DATA_WIDTH-1:0] out16,
  output reg [DATA_WIDTH-1:0] out17,
  output reg [DATA_WIDTH-1:0] out18,
  output reg [DATA_WIDTH-1:0] out19,
  output reg [DATA_WIDTH-1:0] out20,
  output reg [DATA_WIDTH-1:0] out21,
  output reg [DATA_WIDTH-1:0] out22,
  output reg [DATA_WIDTH-1:0] out23,
  output reg [DATA_WIDTH-1:0] out24,
  output reg [DATA_WIDTH-1:0] out25,
  output reg [DATA_WIDTH-1:0] out26,
  output reg [DATA_WIDTH-1:0] out27,
  output reg [DATA_WIDTH-1:0] out28,
  output reg [DATA_WIDTH-1:0] out29,
  output reg [DATA_WIDTH-1:0] out30,
  output reg [DATA_WIDTH-1:0] out31
);

  always@(posedge clk) begin
    if (reset) begin
      start_next_stage <= 1'b0;
    else if (clk_en & start) begin
      start_next_stage <= start;    
      // This means that as long as start_next_stage becomes 1, it will never go back to zero
      // The rule of start_next_stage is to trigger the next stage when filling the pipeline
    end
  end

  always@(posedge clk) begin
    if (clk_en & start) begin
      out0 <= in0;
      out1 <= in8;
      out2 <= in16;
      out3 <= in24;
      out4 <= in4;
      out5 <= in12;
      out6 <= in20;
      out7 <= in28;
      out8 <= in1;
      out9 <= in9;
      out10 <= in17;
      out11 <= in25;
      out12 <= in5;
      out13 <= in13;
      out14 <= in21;
      out15 <= in29;
      out16 <= in2;
      out17 <= in10;
      out18 <= in18;
      out19 <= in26;
      out20 <= in6;
      out21 <= in14;
      out22 <= in22;
      out23 <= in30;
      out24 <= in3;
      out25 <= in11;
      out26 <= in19;
      out27 <= in27;
      out28 <= in7;
      out29 <= in15;
      out30 <= in23;
      out31 <= in31;
    end
  end

endmodule

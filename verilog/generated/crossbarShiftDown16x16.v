/* ../verilog/generated/crossbarShiftDown16x16.v
 * This file is automatically generated by Chi Zhang
 * k = 2, M = 8
 */
module crossbarShiftDown16x16 # (
  parameter DATA_WIDTH = 32
) (
  input [1-1:0] clk,
  input [1-1:0] clk_en,
  input [1-1:0] start,
  input [1-1:0] reset,
  input [DATA_WIDTH-1:0] in0,
  input [DATA_WIDTH-1:0] in1,
  input [DATA_WIDTH-1:0] in2,
  input [DATA_WIDTH-1:0] in3,
  input [DATA_WIDTH-1:0] in4,
  input [DATA_WIDTH-1:0] in5,
  input [DATA_WIDTH-1:0] in6,
  input [DATA_WIDTH-1:0] in7,
  input [DATA_WIDTH-1:0] in8,
  input [DATA_WIDTH-1:0] in9,
  input [DATA_WIDTH-1:0] in10,
  input [DATA_WIDTH-1:0] in11,
  input [DATA_WIDTH-1:0] in12,
  input [DATA_WIDTH-1:0] in13,
  input [DATA_WIDTH-1:0] in14,
  input [DATA_WIDTH-1:0] in15,
  output reg [1-1:0] start_next_stage,
  output reg [DATA_WIDTH-1:0] out0,
  output reg [DATA_WIDTH-1:0] out1,
  output reg [DATA_WIDTH-1:0] out2,
  output reg [DATA_WIDTH-1:0] out3,
  output reg [DATA_WIDTH-1:0] out4,
  output reg [DATA_WIDTH-1:0] out5,
  output reg [DATA_WIDTH-1:0] out6,
  output reg [DATA_WIDTH-1:0] out7,
  output reg [DATA_WIDTH-1:0] out8,
  output reg [DATA_WIDTH-1:0] out9,
  output reg [DATA_WIDTH-1:0] out10,
  output reg [DATA_WIDTH-1:0] out11,
  output reg [DATA_WIDTH-1:0] out12,
  output reg [DATA_WIDTH-1:0] out13,
  output reg [DATA_WIDTH-1:0] out14,
  output reg [DATA_WIDTH-1:0] out15
);

  reg [2-1:0] timestamp;

  always@(posedge clk) begin
    if (reset) begin
      start_next_stage <= 1'b0;
      timestamp <= 2'b00;
    end else if (clk_en & start) begin
      start_next_stage <= start;
      timestamp <= timestamp + 1;
    end
  end

  always@(posedge clk) begin
    if (clk_en & start) begin
      case (timestamp)
        2'b00: begin
          out0 <= in0;
          out1 <= in1;
          out2 <= in2;
          out3 <= in3;
          out4 <= in4;
          out5 <= in5;
          out6 <= in6;
          out7 <= in7;
          out8 <= in8;
          out9 <= in9;
          out10 <= in10;
          out11 <= in11;
          out12 <= in12;
          out13 <= in13;
          out14 <= in14;
          out15 <= in15;
        end
        2'b01: begin
          out0 <= in14;
          out1 <= in15;
          out2 <= in0;
          out3 <= in1;
          out4 <= in2;
          out5 <= in3;
          out6 <= in4;
          out7 <= in5;
          out8 <= in6;
          out9 <= in7;
          out10 <= in8;
          out11 <= in9;
          out12 <= in10;
          out13 <= in11;
          out14 <= in12;
          out15 <= in13;
        end
        2'b10: begin
          out0 <= in12;
          out1 <= in13;
          out2 <= in14;
          out3 <= in15;
          out4 <= in0;
          out5 <= in1;
          out6 <= in2;
          out7 <= in3;
          out8 <= in4;
          out9 <= in5;
          out10 <= in6;
          out11 <= in7;
          out12 <= in8;
          out13 <= in9;
          out14 <= in10;
          out15 <= in11;
        end
        2'b11: begin
          out0 <= in10;
          out1 <= in11;
          out2 <= in12;
          out3 <= in13;
          out4 <= in14;
          out5 <= in15;
          out6 <= in0;
          out7 <= in1;
          out8 <= in2;
          out9 <= in3;
          out10 <= in4;
          out11 <= in5;
          out12 <= in6;
          out13 <= in7;
          out14 <= in8;
          out15 <= in9;
        end
      endcase
    end
  end

endmodule

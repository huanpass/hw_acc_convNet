/* ../verilog/matrixTranspose/src/memArray.v
 * This file is automatically generated by Chi Zhang
 * k = 2, M = 16
 */
module memArray # (
  parameter DATA_WIDTH = 32
) (
  input [1-1:0] clk,
  input [1-1:0] clk_en,
  input [1-1:0] reset,
  input [1-1:0] start,
  input [DATA_WIDTH-1:0] in0,
  input [DATA_WIDTH-1:0] in1,
  input [DATA_WIDTH-1:0] in2,
  input [DATA_WIDTH-1:0] in3,
  input [DATA_WIDTH-1:0] in4,
  input [DATA_WIDTH-1:0] in5,
  input [DATA_WIDTH-1:0] in6,
  input [DATA_WIDTH-1:0] in7,
  input [DATA_WIDTH-1:0] in8,
  input [DATA_WIDTH-1:0] in9,
  input [DATA_WIDTH-1:0] in10,
  input [DATA_WIDTH-1:0] in11,
  input [DATA_WIDTH-1:0] in12,
  input [DATA_WIDTH-1:0] in13,
  input [DATA_WIDTH-1:0] in14,
  input [DATA_WIDTH-1:0] in15,
  input [DATA_WIDTH-1:0] in16,
  input [DATA_WIDTH-1:0] in17,
  input [DATA_WIDTH-1:0] in18,
  input [DATA_WIDTH-1:0] in19,
  input [DATA_WIDTH-1:0] in20,
  input [DATA_WIDTH-1:0] in21,
  input [DATA_WIDTH-1:0] in22,
  input [DATA_WIDTH-1:0] in23,
  input [DATA_WIDTH-1:0] in24,
  input [DATA_WIDTH-1:0] in25,
  input [DATA_WIDTH-1:0] in26,
  input [DATA_WIDTH-1:0] in27,
  input [DATA_WIDTH-1:0] in28,
  input [DATA_WIDTH-1:0] in29,
  input [DATA_WIDTH-1:0] in30,
  input [DATA_WIDTH-1:0] in31,
  output [DATA_WIDTH-1:0] out0,
  output [DATA_WIDTH-1:0] out1,
  output [DATA_WIDTH-1:0] out2,
  output [DATA_WIDTH-1:0] out3,
  output [DATA_WIDTH-1:0] out4,
  output [DATA_WIDTH-1:0] out5,
  output [DATA_WIDTH-1:0] out6,
  output [DATA_WIDTH-1:0] out7,
  output [DATA_WIDTH-1:0] out8,
  output [DATA_WIDTH-1:0] out9,
  output [DATA_WIDTH-1:0] out10,
  output [DATA_WIDTH-1:0] out11,
  output [DATA_WIDTH-1:0] out12,
  output [DATA_WIDTH-1:0] out13,
  output [DATA_WIDTH-1:0] out14,
  output [DATA_WIDTH-1:0] out15,
  output [DATA_WIDTH-1:0] out16,
  output [DATA_WIDTH-1:0] out17,
  output [DATA_WIDTH-1:0] out18,
  output [DATA_WIDTH-1:0] out19,
  output [DATA_WIDTH-1:0] out20,
  output [DATA_WIDTH-1:0] out21,
  output [DATA_WIDTH-1:0] out22,
  output [DATA_WIDTH-1:0] out23,
  output [DATA_WIDTH-1:0] out24,
  output [DATA_WIDTH-1:0] out25,
  output [DATA_WIDTH-1:0] out26,
  output [DATA_WIDTH-1:0] out27,
  output [DATA_WIDTH-1:0] out28,
  output [DATA_WIDTH-1:0] out29,
  output [DATA_WIDTH-1:0] out30,
  output [DATA_WIDTH-1:0] out31,
  output reg [1-1:0] start_next_stage
);

  reg [3-1:0] addr0_1;
  reg [3-1:0] addr2_3;
  reg [3-1:0] addr4_5;
  reg [3-1:0] addr6_7;
  reg [3-1:0] addr8_9;
  reg [3-1:0] addr10_11;
  reg [3-1:0] addr12_13;
  reg [3-1:0] addr14_15;
  reg [3-1:0] addr16_17;
  reg [3-1:0] addr18_19;
  reg [3-1:0] addr20_21;
  reg [3-1:0] addr22_23;
  reg [3-1:0] addr24_25;
  reg [3-1:0] addr26_27;
  reg [3-1:0] addr28_29;
  reg [3-1:0] addr30_31;

  localparam IDLE = 2'b00;
  localparam P1 = 2'b01;
  localparam P2 = 2'b10;

  reg [2-1:0] state;
  reg [3-1:0] counter;

  always@(posedge clk) begin
    if (reset) begin
      state <= IDLE;
      counter <= 3'b000;
      start_next_stage <= 1'b0;
      addr0_1 <= 3'b000;
      addr2_3 <= 3'b000;
      addr4_5 <= 3'b000;
      addr6_7 <= 3'b000;
      addr8_9 <= 3'b000;
      addr10_11 <= 3'b000;
      addr12_13 <= 3'b000;
      addr14_15 <= 3'b000;
      addr16_17 <= 3'b000;
      addr18_19 <= 3'b000;
      addr20_21 <= 3'b000;
      addr22_23 <= 3'b000;
      addr24_25 <= 3'b000;
      addr26_27 <= 3'b000;
      addr28_29 <= 3'b000;
      addr30_31 <= 3'b000;
    end else if (clk_en & start) begin
      case(state)
        IDLE: begin
          state <= P1;
          counter <= counter + 3'b001;
          addr0_1 <= addr0_1 + 3'b001;
          addr2_3 <= addr2_3 + 3'b001;
          addr4_5 <= addr4_5 + 3'b001;
          addr6_7 <= addr6_7 + 3'b001;
          addr8_9 <= addr8_9 + 3'b001;
          addr10_11 <= addr10_11 + 3'b001;
          addr12_13 <= addr12_13 + 3'b001;
          addr14_15 <= addr14_15 + 3'b001;
          addr16_17 <= addr16_17 + 3'b001;
          addr18_19 <= addr18_19 + 3'b001;
          addr20_21 <= addr20_21 + 3'b001;
          addr22_23 <= addr22_23 + 3'b001;
          addr24_25 <= addr24_25 + 3'b001;
          addr26_27 <= addr26_27 + 3'b001;
          addr28_29 <= addr28_29 + 3'b001;
          addr30_31 <= addr30_31 + 3'b001;
        end
        P1: begin
          counter <= counter + 3'b001;
          if (counter == 3'b111) begin
            state <= P2;
            addr0_1 <= 3'b000;
            addr2_3 <= 3'b001;
            addr4_5 <= 3'b010;
            addr6_7 <= 3'b011;
            addr8_9 <= 3'b100;
            addr10_11 <= 3'b101;
            addr12_13 <= 3'b110;
            addr14_15 <= 3'b111;
            addr16_17 <= 3'b000;
            addr18_19 <= 3'b001;
            addr20_21 <= 3'b010;
            addr22_23 <= 3'b011;
            addr24_25 <= 3'b100;
            addr26_27 <= 3'b101;
            addr28_29 <= 3'b110;
            addr30_31 <= 3'b111;
          end else begin
            state <= P1;
            addr0_1 <= addr0_1 + 3'b001;
            addr2_3 <= addr2_3 + 3'b001;
            addr4_5 <= addr4_5 + 3'b001;
            addr6_7 <= addr6_7 + 3'b001;
            addr8_9 <= addr8_9 + 3'b001;
            addr10_11 <= addr10_11 + 3'b001;
            addr12_13 <= addr12_13 + 3'b001;
            addr14_15 <= addr14_15 + 3'b001;
            addr16_17 <= addr16_17 + 3'b001;
            addr18_19 <= addr18_19 + 3'b001;
            addr20_21 <= addr20_21 + 3'b001;
            addr22_23 <= addr22_23 + 3'b001;
            addr24_25 <= addr24_25 + 3'b001;
            addr26_27 <= addr26_27 + 3'b001;
            addr28_29 <= addr28_29 + 3'b001;
            addr30_31 <= addr30_31 + 3'b001;
          end
        end
        P2: begin
          counter <= counter + 3'b001;
          start_next_stage <= 1'b1;
          if (counter == 3'b111) begin
            state <= P1;
            addr0_1 <= 3'b000;
            addr2_3 <= 3'b000;
            addr4_5 <= 3'b000;
            addr6_7 <= 3'b000;
            addr8_9 <= 3'b000;
            addr10_11 <= 3'b000;
            addr12_13 <= 3'b000;
            addr14_15 <= 3'b000;
            addr16_17 <= 3'b000;
            addr18_19 <= 3'b000;
            addr20_21 <= 3'b000;
            addr22_23 <= 3'b000;
            addr24_25 <= 3'b000;
            addr26_27 <= 3'b000;
            addr28_29 <= 3'b000;
            addr30_31 <= 3'b000;
          end else begin
            state <= P2;
            addr0_1 <= addr0_1 - 3'b001;
            addr2_3 <= addr2_3 - 3'b001;
            addr4_5 <= addr4_5 - 3'b001;
            addr6_7 <= addr6_7 - 3'b001;
            addr8_9 <= addr8_9 - 3'b001;
            addr10_11 <= addr10_11 - 3'b001;
            addr12_13 <= addr12_13 - 3'b001;
            addr14_15 <= addr14_15 - 3'b001;
            addr16_17 <= addr16_17 - 3'b001;
            addr18_19 <= addr18_19 - 3'b001;
            addr20_21 <= addr20_21 - 3'b001;
            addr22_23 <= addr22_23 - 3'b001;
            addr24_25 <= addr24_25 - 3'b001;
            addr26_27 <= addr26_27 - 3'b001;
            addr28_29 <= addr28_29 - 3'b001;
            addr30_31 <= addr30_31 - 3'b001;
          end
        end
        default: begin end
      endcase
    end
  end

  single_port_ram # (
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(3)
    ) mem0 (
    .data(in0),
    .addr(addr0_1),
    .we(start & clk_en),
    .clk(clk),
    .q(out0)
  );

  single_port_ram # (
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(3)
    ) mem1 (
    .data(in1),
    .addr(addr0_1),
    .we(start & clk_en),
    .clk(clk),
    .q(out1)
  );

  single_port_ram # (
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(3)
    ) mem2 (
    .data(in2),
    .addr(addr2_3),
    .we(start & clk_en),
    .clk(clk),
    .q(out2)
  );

  single_port_ram # (
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(3)
    ) mem3 (
    .data(in3),
    .addr(addr2_3),
    .we(start & clk_en),
    .clk(clk),
    .q(out3)
  );

  single_port_ram # (
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(3)
    ) mem4 (
    .data(in4),
    .addr(addr4_5),
    .we(start & clk_en),
    .clk(clk),
    .q(out4)
  );

  single_port_ram # (
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(3)
    ) mem5 (
    .data(in5),
    .addr(addr4_5),
    .we(start & clk_en),
    .clk(clk),
    .q(out5)
  );

  single_port_ram # (
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(3)
    ) mem6 (
    .data(in6),
    .addr(addr6_7),
    .we(start & clk_en),
    .clk(clk),
    .q(out6)
  );

  single_port_ram # (
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(3)
    ) mem7 (
    .data(in7),
    .addr(addr6_7),
    .we(start & clk_en),
    .clk(clk),
    .q(out7)
  );

  single_port_ram # (
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(3)
    ) mem8 (
    .data(in8),
    .addr(addr8_9),
    .we(start & clk_en),
    .clk(clk),
    .q(out8)
  );

  single_port_ram # (
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(3)
    ) mem9 (
    .data(in9),
    .addr(addr8_9),
    .we(start & clk_en),
    .clk(clk),
    .q(out9)
  );

  single_port_ram # (
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(3)
    ) mem10 (
    .data(in10),
    .addr(addr10_11),
    .we(start & clk_en),
    .clk(clk),
    .q(out10)
  );

  single_port_ram # (
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(3)
    ) mem11 (
    .data(in11),
    .addr(addr10_11),
    .we(start & clk_en),
    .clk(clk),
    .q(out11)
  );

  single_port_ram # (
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(3)
    ) mem12 (
    .data(in12),
    .addr(addr12_13),
    .we(start & clk_en),
    .clk(clk),
    .q(out12)
  );

  single_port_ram # (
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(3)
    ) mem13 (
    .data(in13),
    .addr(addr12_13),
    .we(start & clk_en),
    .clk(clk),
    .q(out13)
  );

  single_port_ram # (
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(3)
    ) mem14 (
    .data(in14),
    .addr(addr14_15),
    .we(start & clk_en),
    .clk(clk),
    .q(out14)
  );

  single_port_ram # (
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(3)
    ) mem15 (
    .data(in15),
    .addr(addr14_15),
    .we(start & clk_en),
    .clk(clk),
    .q(out15)
  );

  single_port_ram # (
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(3)
    ) mem16 (
    .data(in16),
    .addr(addr16_17),
    .we(start & clk_en),
    .clk(clk),
    .q(out16)
  );

  single_port_ram # (
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(3)
    ) mem17 (
    .data(in17),
    .addr(addr16_17),
    .we(start & clk_en),
    .clk(clk),
    .q(out17)
  );

  single_port_ram # (
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(3)
    ) mem18 (
    .data(in18),
    .addr(addr18_19),
    .we(start & clk_en),
    .clk(clk),
    .q(out18)
  );

  single_port_ram # (
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(3)
    ) mem19 (
    .data(in19),
    .addr(addr18_19),
    .we(start & clk_en),
    .clk(clk),
    .q(out19)
  );

  single_port_ram # (
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(3)
    ) mem20 (
    .data(in20),
    .addr(addr20_21),
    .we(start & clk_en),
    .clk(clk),
    .q(out20)
  );

  single_port_ram # (
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(3)
    ) mem21 (
    .data(in21),
    .addr(addr20_21),
    .we(start & clk_en),
    .clk(clk),
    .q(out21)
  );

  single_port_ram # (
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(3)
    ) mem22 (
    .data(in22),
    .addr(addr22_23),
    .we(start & clk_en),
    .clk(clk),
    .q(out22)
  );

  single_port_ram # (
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(3)
    ) mem23 (
    .data(in23),
    .addr(addr22_23),
    .we(start & clk_en),
    .clk(clk),
    .q(out23)
  );

  single_port_ram # (
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(3)
    ) mem24 (
    .data(in24),
    .addr(addr24_25),
    .we(start & clk_en),
    .clk(clk),
    .q(out24)
  );

  single_port_ram # (
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(3)
    ) mem25 (
    .data(in25),
    .addr(addr24_25),
    .we(start & clk_en),
    .clk(clk),
    .q(out25)
  );

  single_port_ram # (
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(3)
    ) mem26 (
    .data(in26),
    .addr(addr26_27),
    .we(start & clk_en),
    .clk(clk),
    .q(out26)
  );

  single_port_ram # (
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(3)
    ) mem27 (
    .data(in27),
    .addr(addr26_27),
    .we(start & clk_en),
    .clk(clk),
    .q(out27)
  );

  single_port_ram # (
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(3)
    ) mem28 (
    .data(in28),
    .addr(addr28_29),
    .we(start & clk_en),
    .clk(clk),
    .q(out28)
  );

  single_port_ram # (
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(3)
    ) mem29 (
    .data(in29),
    .addr(addr28_29),
    .we(start & clk_en),
    .clk(clk),
    .q(out29)
  );

  single_port_ram # (
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(3)
    ) mem30 (
    .data(in30),
    .addr(addr30_31),
    .we(start & clk_en),
    .clk(clk),
    .q(out30)
  );

  single_port_ram # (
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(3)
    ) mem31 (
    .data(in31),
    .addr(addr30_31),
    .we(start & clk_en),
    .clk(clk),
    .q(out31)
  );

endmodule

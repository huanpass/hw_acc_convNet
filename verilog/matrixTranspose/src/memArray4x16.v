/* ../verilog/matrixTranspose/src/memArray4x16.v
 * This file is automatically generated by Chi Zhang
 * k = 2, M = 8
 */
module memArray4x16 # (
  parameter DATA_WIDTH = 32
) (
  input [1-1:0] clk,
  input [1-1:0] clk_en,
  input [1-1:0] reset,
  input [1-1:0] start,
  input [DATA_WIDTH-1:0] in0,
  input [DATA_WIDTH-1:0] in1,
  input [DATA_WIDTH-1:0] in2,
  input [DATA_WIDTH-1:0] in3,
  input [DATA_WIDTH-1:0] in4,
  input [DATA_WIDTH-1:0] in5,
  input [DATA_WIDTH-1:0] in6,
  input [DATA_WIDTH-1:0] in7,
  input [DATA_WIDTH-1:0] in8,
  input [DATA_WIDTH-1:0] in9,
  input [DATA_WIDTH-1:0] in10,
  input [DATA_WIDTH-1:0] in11,
  input [DATA_WIDTH-1:0] in12,
  input [DATA_WIDTH-1:0] in13,
  input [DATA_WIDTH-1:0] in14,
  input [DATA_WIDTH-1:0] in15,
  output [DATA_WIDTH-1:0] out0,
  output [DATA_WIDTH-1:0] out1,
  output [DATA_WIDTH-1:0] out2,
  output [DATA_WIDTH-1:0] out3,
  output [DATA_WIDTH-1:0] out4,
  output [DATA_WIDTH-1:0] out5,
  output [DATA_WIDTH-1:0] out6,
  output [DATA_WIDTH-1:0] out7,
  output [DATA_WIDTH-1:0] out8,
  output [DATA_WIDTH-1:0] out9,
  output [DATA_WIDTH-1:0] out10,
  output [DATA_WIDTH-1:0] out11,
  output [DATA_WIDTH-1:0] out12,
  output [DATA_WIDTH-1:0] out13,
  output [DATA_WIDTH-1:0] out14,
  output [DATA_WIDTH-1:0] out15,
  output reg [1-1:0] start_next_stage
);

  reg [2-1:0] addr0_1;
  reg [2-1:0] addr2_3;
  reg [2-1:0] addr4_5;
  reg [2-1:0] addr6_7;
  reg [2-1:0] addr8_9;
  reg [2-1:0] addr10_11;
  reg [2-1:0] addr12_13;
  reg [2-1:0] addr14_15;

  localparam IDLE = 2'b00;
  localparam P1 = 2'b01;
  localparam P2 = 2'b10;

  reg [2-1:0] state;
  reg [2-1:0] counter;

  always@(posedge clk) begin
    if (reset) begin
      state <= IDLE;
      counter <= 2'b00;
      start_next_stage <= 1'b0;
      addr0_1 <= 2'b00;
      addr2_3 <= 2'b00;
      addr4_5 <= 2'b00;
      addr6_7 <= 2'b00;
      addr8_9 <= 2'b00;
      addr10_11 <= 2'b00;
      addr12_13 <= 2'b00;
      addr14_15 <= 2'b00;
    end else if (clk_en & start) begin
      case(state)
        IDLE: begin
          state <= P1;
          counter <= counter + 2'b01;
          addr0_1 <= addr0_1 + 2'b01;
          addr2_3 <= addr2_3 + 2'b01;
          addr4_5 <= addr4_5 + 2'b01;
          addr6_7 <= addr6_7 + 2'b01;
          addr8_9 <= addr8_9 + 2'b01;
          addr10_11 <= addr10_11 + 2'b01;
          addr12_13 <= addr12_13 + 2'b01;
          addr14_15 <= addr14_15 + 2'b01;
        end
        P1: begin
          counter <= counter + 2'b01;
          if (counter == 2'b11) begin
            state <= P2;
            addr0_1 <= 2'b00;
            addr2_3 <= 2'b01;
            addr4_5 <= 2'b10;
            addr6_7 <= 2'b11;
            addr8_9 <= 2'b00;
            addr10_11 <= 2'b01;
            addr12_13 <= 2'b10;
            addr14_15 <= 2'b11;
          end else begin
            state <= P1;
            addr0_1 <= addr0_1 + 2'b01;
            addr2_3 <= addr2_3 + 2'b01;
            addr4_5 <= addr4_5 + 2'b01;
            addr6_7 <= addr6_7 + 2'b01;
            addr8_9 <= addr8_9 + 2'b01;
            addr10_11 <= addr10_11 + 2'b01;
            addr12_13 <= addr12_13 + 2'b01;
            addr14_15 <= addr14_15 + 2'b01;
          end
        end
        P2: begin
          counter <= counter + 2'b01;
          start_next_stage <= 1'b1;
          if (counter == 2'b11) begin
            state <= P1;
            addr0_1 <= 2'b00;
            addr2_3 <= 2'b00;
            addr4_5 <= 2'b00;
            addr6_7 <= 2'b00;
            addr8_9 <= 2'b00;
            addr10_11 <= 2'b00;
            addr12_13 <= 2'b00;
            addr14_15 <= 2'b00;
          end else begin
            state <= P2;
            addr0_1 <= addr0_1 - 2'b01;
            addr2_3 <= addr2_3 - 2'b01;
            addr4_5 <= addr4_5 - 2'b01;
            addr6_7 <= addr6_7 - 2'b01;
            addr8_9 <= addr8_9 - 2'b01;
            addr10_11 <= addr10_11 - 2'b01;
            addr12_13 <= addr12_13 - 2'b01;
            addr14_15 <= addr14_15 - 2'b01;
          end
        end
        default: begin end
      endcase
    end
  end

  single_port_ram # (
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(2)
    ) mem0 (
    .data(in0),
    .addr(addr0_1),
    .we(start & clk_en),
    .clk(clk),
    .q(out0)
  );

  single_port_ram # (
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(2)
    ) mem1 (
    .data(in1),
    .addr(addr0_1),
    .we(start & clk_en),
    .clk(clk),
    .q(out1)
  );

  single_port_ram # (
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(2)
    ) mem2 (
    .data(in2),
    .addr(addr2_3),
    .we(start & clk_en),
    .clk(clk),
    .q(out2)
  );

  single_port_ram # (
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(2)
    ) mem3 (
    .data(in3),
    .addr(addr2_3),
    .we(start & clk_en),
    .clk(clk),
    .q(out3)
  );

  single_port_ram # (
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(2)
    ) mem4 (
    .data(in4),
    .addr(addr4_5),
    .we(start & clk_en),
    .clk(clk),
    .q(out4)
  );

  single_port_ram # (
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(2)
    ) mem5 (
    .data(in5),
    .addr(addr4_5),
    .we(start & clk_en),
    .clk(clk),
    .q(out5)
  );

  single_port_ram # (
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(2)
    ) mem6 (
    .data(in6),
    .addr(addr6_7),
    .we(start & clk_en),
    .clk(clk),
    .q(out6)
  );

  single_port_ram # (
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(2)
    ) mem7 (
    .data(in7),
    .addr(addr6_7),
    .we(start & clk_en),
    .clk(clk),
    .q(out7)
  );

  single_port_ram # (
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(2)
    ) mem8 (
    .data(in8),
    .addr(addr8_9),
    .we(start & clk_en),
    .clk(clk),
    .q(out8)
  );

  single_port_ram # (
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(2)
    ) mem9 (
    .data(in9),
    .addr(addr8_9),
    .we(start & clk_en),
    .clk(clk),
    .q(out9)
  );

  single_port_ram # (
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(2)
    ) mem10 (
    .data(in10),
    .addr(addr10_11),
    .we(start & clk_en),
    .clk(clk),
    .q(out10)
  );

  single_port_ram # (
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(2)
    ) mem11 (
    .data(in11),
    .addr(addr10_11),
    .we(start & clk_en),
    .clk(clk),
    .q(out11)
  );

  single_port_ram # (
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(2)
    ) mem12 (
    .data(in12),
    .addr(addr12_13),
    .we(start & clk_en),
    .clk(clk),
    .q(out12)
  );

  single_port_ram # (
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(2)
    ) mem13 (
    .data(in13),
    .addr(addr12_13),
    .we(start & clk_en),
    .clk(clk),
    .q(out13)
  );

  single_port_ram # (
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(2)
    ) mem14 (
    .data(in14),
    .addr(addr14_15),
    .we(start & clk_en),
    .clk(clk),
    .q(out14)
  );

  single_port_ram # (
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(2)
    ) mem15 (
    .data(in15),
    .addr(addr14_15),
    .we(start & clk_en),
    .clk(clk),
    .q(out15)
  );

endmodule

/* ../verilog/matrixTranspose/src/streamMatrixTransposeTop.v
 * This file is automatically generated by Chi Zhang
 * k = 2, M = 8
 */
module streamMatrixTransposeTop # (
  parameter DATA_WIDTH = 32
) (
  input [1-1:0] clk,
  input [1-1:0] clk_en,
  input [1-1:0] reset,
  input [1-1:0] start,
  input [DATA_WIDTH-1:0] in0,
  input [DATA_WIDTH-1:0] in1,
  input [DATA_WIDTH-1:0] in2,
  input [DATA_WIDTH-1:0] in3,
  input [DATA_WIDTH-1:0] in4,
  input [DATA_WIDTH-1:0] in5,
  input [DATA_WIDTH-1:0] in6,
  input [DATA_WIDTH-1:0] in7,
  input [DATA_WIDTH-1:0] in8,
  input [DATA_WIDTH-1:0] in9,
  input [DATA_WIDTH-1:0] in10,
  input [DATA_WIDTH-1:0] in11,
  input [DATA_WIDTH-1:0] in12,
  input [DATA_WIDTH-1:0] in13,
  input [DATA_WIDTH-1:0] in14,
  input [DATA_WIDTH-1:0] in15,
  output [DATA_WIDTH-1:0] out0,
  output [DATA_WIDTH-1:0] out1,
  output [DATA_WIDTH-1:0] out2,
  output [DATA_WIDTH-1:0] out3,
  output [DATA_WIDTH-1:0] out4,
  output [DATA_WIDTH-1:0] out5,
  output [DATA_WIDTH-1:0] out6,
  output [DATA_WIDTH-1:0] out7,
  output [DATA_WIDTH-1:0] out8,
  output [DATA_WIDTH-1:0] out9,
  output [DATA_WIDTH-1:0] out10,
  output [DATA_WIDTH-1:0] out11,
  output [DATA_WIDTH-1:0] out12,
  output [DATA_WIDTH-1:0] out13,
  output [DATA_WIDTH-1:0] out14,
  output [DATA_WIDTH-1:0] out15,
  output [1-1:0] start_next_stage
);

  wire [DATA_WIDTH-1:0] shiftDownOut0;
  wire [DATA_WIDTH-1:0] shiftDownOut1;
  wire [DATA_WIDTH-1:0] shiftDownOut2;
  wire [DATA_WIDTH-1:0] shiftDownOut3;
  wire [DATA_WIDTH-1:0] shiftDownOut4;
  wire [DATA_WIDTH-1:0] shiftDownOut5;
  wire [DATA_WIDTH-1:0] shiftDownOut6;
  wire [DATA_WIDTH-1:0] shiftDownOut7;
  wire [DATA_WIDTH-1:0] shiftDownOut8;
  wire [DATA_WIDTH-1:0] shiftDownOut9;
  wire [DATA_WIDTH-1:0] shiftDownOut10;
  wire [DATA_WIDTH-1:0] shiftDownOut11;
  wire [DATA_WIDTH-1:0] shiftDownOut12;
  wire [DATA_WIDTH-1:0] shiftDownOut13;
  wire [DATA_WIDTH-1:0] shiftDownOut14;
  wire [DATA_WIDTH-1:0] shiftDownOut15;
  wire [1-1:0] start_next_stage_shiftDown;

  crossbar # (
    .DATA_WIDTH(DATA_WIDTH)
    ) stage0 (
    .clk(clk),
    .clk_en(clk_en),
    .start(start),
    .reset(reset),
    .in0(in0),
    .in1(in1),
    .in2(in2),
    .in3(in3),
    .in4(in4),
    .in5(in5),
    .in6(in6),
    .in7(in7),
    .in8(in8),
    .in9(in9),
    .in10(in10),
    .in11(in11),
    .in12(in12),
    .in13(in13),
    .in14(in14),
    .in15(in15),
    .start_next_stage(start_next_stage_shiftDown),
    .out0(shiftDownOut0),
    .out1(shiftDownOut1),
    .out2(shiftDownOut2),
    .out3(shiftDownOut3),
    .out4(shiftDownOut4),
    .out5(shiftDownOut5),
    .out6(shiftDownOut6),
    .out7(shiftDownOut7),
    .out8(shiftDownOut8),
    .out9(shiftDownOut9),
    .out10(shiftDownOut10),
    .out11(shiftDownOut11),
    .out12(shiftDownOut12),
    .out13(shiftDownOut13),
    .out14(shiftDownOut14),
    .out15(shiftDownOut15)
  );

  wire [DATA_WIDTH-1:0] crossbarOut0;
  wire [DATA_WIDTH-1:0] crossbarOut1;
  wire [DATA_WIDTH-1:0] crossbarOut2;
  wire [DATA_WIDTH-1:0] crossbarOut3;
  wire [DATA_WIDTH-1:0] crossbarOut4;
  wire [DATA_WIDTH-1:0] crossbarOut5;
  wire [DATA_WIDTH-1:0] crossbarOut6;
  wire [DATA_WIDTH-1:0] crossbarOut7;
  wire [DATA_WIDTH-1:0] crossbarOut8;
  wire [DATA_WIDTH-1:0] crossbarOut9;
  wire [DATA_WIDTH-1:0] crossbarOut10;
  wire [DATA_WIDTH-1:0] crossbarOut11;
  wire [DATA_WIDTH-1:0] crossbarOut12;
  wire [DATA_WIDTH-1:0] crossbarOut13;
  wire [DATA_WIDTH-1:0] crossbarOut14;
  wire [DATA_WIDTH-1:0] crossbarOut15;
  wire [1-1:0] start_next_stage_crossbar;

  crossbarShiftDown # (
    .DATA_WIDTH(DATA_WIDTH)
    ) stage1 (
    .clk(clk),
    .clk_en(clk_en),
    .reset(reset),
    .start(start_next_stage_shiftDown),
    .in0(shiftDownOut0),
    .in1(shiftDownOut1),
    .in2(shiftDownOut2),
    .in3(shiftDownOut3),
    .in4(shiftDownOut4),
    .in5(shiftDownOut5),
    .in6(shiftDownOut6),
    .in7(shiftDownOut7),
    .in8(shiftDownOut8),
    .in9(shiftDownOut9),
    .in10(shiftDownOut10),
    .in11(shiftDownOut11),
    .in12(shiftDownOut12),
    .in13(shiftDownOut13),
    .in14(shiftDownOut14),
    .in15(shiftDownOut15),
    .start_next_stage(start_next_stage_crossbar),
    .out0(crossbarOut0),
    .out1(crossbarOut1),
    .out2(crossbarOut2),
    .out3(crossbarOut3),
    .out4(crossbarOut4),
    .out5(crossbarOut5),
    .out6(crossbarOut6),
    .out7(crossbarOut7),
    .out8(crossbarOut8),
    .out9(crossbarOut9),
    .out10(crossbarOut10),
    .out11(crossbarOut11),
    .out12(crossbarOut12),
    .out13(crossbarOut13),
    .out14(crossbarOut14),
    .out15(crossbarOut15)
  );

  wire [DATA_WIDTH-1:0] memArrayOut0;
  wire [DATA_WIDTH-1:0] memArrayOut1;
  wire [DATA_WIDTH-1:0] memArrayOut2;
  wire [DATA_WIDTH-1:0] memArrayOut3;
  wire [DATA_WIDTH-1:0] memArrayOut4;
  wire [DATA_WIDTH-1:0] memArrayOut5;
  wire [DATA_WIDTH-1:0] memArrayOut6;
  wire [DATA_WIDTH-1:0] memArrayOut7;
  wire [DATA_WIDTH-1:0] memArrayOut8;
  wire [DATA_WIDTH-1:0] memArrayOut9;
  wire [DATA_WIDTH-1:0] memArrayOut10;
  wire [DATA_WIDTH-1:0] memArrayOut11;
  wire [DATA_WIDTH-1:0] memArrayOut12;
  wire [DATA_WIDTH-1:0] memArrayOut13;
  wire [DATA_WIDTH-1:0] memArrayOut14;
  wire [DATA_WIDTH-1:0] memArrayOut15;
  wire [1-1:0] start_next_stage_memArray;

  memArray # (
    .DATA_WIDTH(DATA_WIDTH)
    ) stage2 (
    .clk(clk),
    .clk_en(clk_en),
    .reset(reset),
    .start(start_next_stage_crossbar),
    .in0(crossbarOut0),
    .in1(crossbarOut1),
    .in2(crossbarOut2),
    .in3(crossbarOut3),
    .in4(crossbarOut4),
    .in5(crossbarOut5),
    .in6(crossbarOut6),
    .in7(crossbarOut7),
    .in8(crossbarOut8),
    .in9(crossbarOut9),
    .in10(crossbarOut10),
    .in11(crossbarOut11),
    .in12(crossbarOut12),
    .in13(crossbarOut13),
    .in14(crossbarOut14),
    .in15(crossbarOut15),
    .start_next_stage(start_next_stage_memArray),
    .out0(memArrayOut0),
    .out1(memArrayOut1),
    .out2(memArrayOut2),
    .out3(memArrayOut3),
    .out4(memArrayOut4),
    .out5(memArrayOut5),
    .out6(memArrayOut6),
    .out7(memArrayOut7),
    .out8(memArrayOut8),
    .out9(memArrayOut9),
    .out10(memArrayOut10),
    .out11(memArrayOut11),
    .out12(memArrayOut12),
    .out13(memArrayOut13),
    .out14(memArrayOut14),
    .out15(memArrayOut15)
  );

  crossbarShiftUp # (
    .DATA_WIDTH(DATA_WIDTH)
    ) stage3 (
    .clk(clk),
    .clk_en(clk_en),
    .reset(reset),
    .start(start_next_stage_memArray),
    .in0(memArrayOut0),
    .in1(memArrayOut1),
    .in2(memArrayOut2),
    .in3(memArrayOut3),
    .in4(memArrayOut4),
    .in5(memArrayOut5),
    .in6(memArrayOut6),
    .in7(memArrayOut7),
    .in8(memArrayOut8),
    .in9(memArrayOut9),
    .in10(memArrayOut10),
    .in11(memArrayOut11),
    .in12(memArrayOut12),
    .in13(memArrayOut13),
    .in14(memArrayOut14),
    .in15(memArrayOut15),
    .start_next_stage(start_next_stage),
    .out0(out0),
    .out1(out1),
    .out2(out2),
    .out3(out3),
    .out4(out4),
    .out5(out5),
    .out6(out6),
    .out7(out7),
    .out8(out8),
    .out9(out9),
    .out10(out10),
    .out11(out11),
    .out12(out12),
    .out13(out13),
    .out14(out14),
    .out15(out15)
  );

endmodule

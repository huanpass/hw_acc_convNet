/* ../verilog/matrixTranspose/src/crossbar64x64.v
 * This file is automatically generated by Chi Zhang
 * k = 4, M = 16
 */
module crossbar64x64 # (
  parameter DATA_WIDTH = 32
) (
  input [1-1:0] clk,
  input [1-1:0] clk_en,
  input [1-1:0] reset,
  input [1-1:0] start,
  input [DATA_WIDTH-1:0] in0,
  input [DATA_WIDTH-1:0] in1,
  input [DATA_WIDTH-1:0] in2,
  input [DATA_WIDTH-1:0] in3,
  input [DATA_WIDTH-1:0] in4,
  input [DATA_WIDTH-1:0] in5,
  input [DATA_WIDTH-1:0] in6,
  input [DATA_WIDTH-1:0] in7,
  input [DATA_WIDTH-1:0] in8,
  input [DATA_WIDTH-1:0] in9,
  input [DATA_WIDTH-1:0] in10,
  input [DATA_WIDTH-1:0] in11,
  input [DATA_WIDTH-1:0] in12,
  input [DATA_WIDTH-1:0] in13,
  input [DATA_WIDTH-1:0] in14,
  input [DATA_WIDTH-1:0] in15,
  input [DATA_WIDTH-1:0] in16,
  input [DATA_WIDTH-1:0] in17,
  input [DATA_WIDTH-1:0] in18,
  input [DATA_WIDTH-1:0] in19,
  input [DATA_WIDTH-1:0] in20,
  input [DATA_WIDTH-1:0] in21,
  input [DATA_WIDTH-1:0] in22,
  input [DATA_WIDTH-1:0] in23,
  input [DATA_WIDTH-1:0] in24,
  input [DATA_WIDTH-1:0] in25,
  input [DATA_WIDTH-1:0] in26,
  input [DATA_WIDTH-1:0] in27,
  input [DATA_WIDTH-1:0] in28,
  input [DATA_WIDTH-1:0] in29,
  input [DATA_WIDTH-1:0] in30,
  input [DATA_WIDTH-1:0] in31,
  input [DATA_WIDTH-1:0] in32,
  input [DATA_WIDTH-1:0] in33,
  input [DATA_WIDTH-1:0] in34,
  input [DATA_WIDTH-1:0] in35,
  input [DATA_WIDTH-1:0] in36,
  input [DATA_WIDTH-1:0] in37,
  input [DATA_WIDTH-1:0] in38,
  input [DATA_WIDTH-1:0] in39,
  input [DATA_WIDTH-1:0] in40,
  input [DATA_WIDTH-1:0] in41,
  input [DATA_WIDTH-1:0] in42,
  input [DATA_WIDTH-1:0] in43,
  input [DATA_WIDTH-1:0] in44,
  input [DATA_WIDTH-1:0] in45,
  input [DATA_WIDTH-1:0] in46,
  input [DATA_WIDTH-1:0] in47,
  input [DATA_WIDTH-1:0] in48,
  input [DATA_WIDTH-1:0] in49,
  input [DATA_WIDTH-1:0] in50,
  input [DATA_WIDTH-1:0] in51,
  input [DATA_WIDTH-1:0] in52,
  input [DATA_WIDTH-1:0] in53,
  input [DATA_WIDTH-1:0] in54,
  input [DATA_WIDTH-1:0] in55,
  input [DATA_WIDTH-1:0] in56,
  input [DATA_WIDTH-1:0] in57,
  input [DATA_WIDTH-1:0] in58,
  input [DATA_WIDTH-1:0] in59,
  input [DATA_WIDTH-1:0] in60,
  input [DATA_WIDTH-1:0] in61,
  input [DATA_WIDTH-1:0] in62,
  input [DATA_WIDTH-1:0] in63,
  output reg [1-1:0] start_next_stage,
  output reg [DATA_WIDTH-1:0] out0,
  output reg [DATA_WIDTH-1:0] out1,
  output reg [DATA_WIDTH-1:0] out2,
  output reg [DATA_WIDTH-1:0] out3,
  output reg [DATA_WIDTH-1:0] out4,
  output reg [DATA_WIDTH-1:0] out5,
  output reg [DATA_WIDTH-1:0] out6,
  output reg [DATA_WIDTH-1:0] out7,
  output reg [DATA_WIDTH-1:0] out8,
  output reg [DATA_WIDTH-1:0] out9,
  output reg [DATA_WIDTH-1:0] out10,
  output reg [DATA_WIDTH-1:0] out11,
  output reg [DATA_WIDTH-1:0] out12,
  output reg [DATA_WIDTH-1:0] out13,
  output reg [DATA_WIDTH-1:0] out14,
  output reg [DATA_WIDTH-1:0] out15,
  output reg [DATA_WIDTH-1:0] out16,
  output reg [DATA_WIDTH-1:0] out17,
  output reg [DATA_WIDTH-1:0] out18,
  output reg [DATA_WIDTH-1:0] out19,
  output reg [DATA_WIDTH-1:0] out20,
  output reg [DATA_WIDTH-1:0] out21,
  output reg [DATA_WIDTH-1:0] out22,
  output reg [DATA_WIDTH-1:0] out23,
  output reg [DATA_WIDTH-1:0] out24,
  output reg [DATA_WIDTH-1:0] out25,
  output reg [DATA_WIDTH-1:0] out26,
  output reg [DATA_WIDTH-1:0] out27,
  output reg [DATA_WIDTH-1:0] out28,
  output reg [DATA_WIDTH-1:0] out29,
  output reg [DATA_WIDTH-1:0] out30,
  output reg [DATA_WIDTH-1:0] out31,
  output reg [DATA_WIDTH-1:0] out32,
  output reg [DATA_WIDTH-1:0] out33,
  output reg [DATA_WIDTH-1:0] out34,
  output reg [DATA_WIDTH-1:0] out35,
  output reg [DATA_WIDTH-1:0] out36,
  output reg [DATA_WIDTH-1:0] out37,
  output reg [DATA_WIDTH-1:0] out38,
  output reg [DATA_WIDTH-1:0] out39,
  output reg [DATA_WIDTH-1:0] out40,
  output reg [DATA_WIDTH-1:0] out41,
  output reg [DATA_WIDTH-1:0] out42,
  output reg [DATA_WIDTH-1:0] out43,
  output reg [DATA_WIDTH-1:0] out44,
  output reg [DATA_WIDTH-1:0] out45,
  output reg [DATA_WIDTH-1:0] out46,
  output reg [DATA_WIDTH-1:0] out47,
  output reg [DATA_WIDTH-1:0] out48,
  output reg [DATA_WIDTH-1:0] out49,
  output reg [DATA_WIDTH-1:0] out50,
  output reg [DATA_WIDTH-1:0] out51,
  output reg [DATA_WIDTH-1:0] out52,
  output reg [DATA_WIDTH-1:0] out53,
  output reg [DATA_WIDTH-1:0] out54,
  output reg [DATA_WIDTH-1:0] out55,
  output reg [DATA_WIDTH-1:0] out56,
  output reg [DATA_WIDTH-1:0] out57,
  output reg [DATA_WIDTH-1:0] out58,
  output reg [DATA_WIDTH-1:0] out59,
  output reg [DATA_WIDTH-1:0] out60,
  output reg [DATA_WIDTH-1:0] out61,
  output reg [DATA_WIDTH-1:0] out62,
  output reg [DATA_WIDTH-1:0] out63
);

  always@(posedge clk) begin
    if (reset) begin
      start_next_stage <= 1'b0;
    end else if (clk_en & start) begin
      start_next_stage <= start;
    end
  end

  always@(posedge clk) begin
    if (clk_en & start) begin
      out0 <= in0;
      out1 <= in16;
      out2 <= in32;
      out3 <= in48;
      out4 <= in4;
      out5 <= in20;
      out6 <= in36;
      out7 <= in52;
      out8 <= in8;
      out9 <= in24;
      out10 <= in40;
      out11 <= in56;
      out12 <= in12;
      out13 <= in28;
      out14 <= in44;
      out15 <= in60;
      out16 <= in1;
      out17 <= in17;
      out18 <= in33;
      out19 <= in49;
      out20 <= in5;
      out21 <= in21;
      out22 <= in37;
      out23 <= in53;
      out24 <= in9;
      out25 <= in25;
      out26 <= in41;
      out27 <= in57;
      out28 <= in13;
      out29 <= in29;
      out30 <= in45;
      out31 <= in61;
      out32 <= in2;
      out33 <= in18;
      out34 <= in34;
      out35 <= in50;
      out36 <= in6;
      out37 <= in22;
      out38 <= in38;
      out39 <= in54;
      out40 <= in10;
      out41 <= in26;
      out42 <= in42;
      out43 <= in58;
      out44 <= in14;
      out45 <= in30;
      out46 <= in46;
      out47 <= in62;
      out48 <= in3;
      out49 <= in19;
      out50 <= in35;
      out51 <= in51;
      out52 <= in7;
      out53 <= in23;
      out54 <= in39;
      out55 <= in55;
      out56 <= in11;
      out57 <= in27;
      out58 <= in43;
      out59 <= in59;
      out60 <= in15;
      out61 <= in31;
      out62 <= in47;
      out63 <= in63;
    end
  end

endmodule
